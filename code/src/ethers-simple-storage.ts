import { config } from 'dotenv';
import { ethers } from 'ethers';
import fs from 'node:fs/promises';
import { resolve } from 'node:path';

config();

const SSPATH = resolve('src/SimpleStorage.sol');

var input = {
    language: 'Solidity',
    sources: {
      'test.sol': {
        content: 'contract C { function f() public { } }'
      }
    },
    settings: {
      outputSelection: {
        '*': {
          '*': ['*']
        }
      }
    }
  };

async function deploy() {
    const provider = new ethers.JsonRpcProvider(process.env.RPC_URL!);
    const wallet  = new ethers.Wallet(process.env.PRIVATE_KEY!, provider)

    const abi  = await fs.readFile('src/SimpleStorage_sol_SimpleStorage.abi', 'utf-8')
    const bin = await fs.readFile('src/SimpleStorage_sol_SimpleStorage.bin', 'utf-8')

    const contractFactory = new ethers.ContractFactory(abi, bin, wallet);
    console.log("Deploying...")
    const contract = await contractFactory.deploy();
    const address = await contract.getAddress();
    console.log("Deployed to:", address);

    await contract.waitForDeployment();

    // console.log("Mined:", tx.hash);
    // console.log("Gas used:", tx.gasLimit.toString());
    // console.log("Block Number:", tx.blockNumber);
    // console.log("Block Hash:", tx. blockHash);
    // console.log("Contract Address:", await contract.getAddress());

    // const txs = {
    //     nonce: await wallet.getNonce(),
    //     gasPrice: 20000000000,
    //     gasLimit: 2100000,
    //     to: null,
    //     value: 0,
    //     data: "0x608060405234801561001057600080fd5b50610634806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063471f7cdf1461005c5780636057361d1461007a5780636f760f41146100965780638bab8dd5146100b2578063b05784b8146100e2575b600080fd5b610064610100565b6040516100719190610299565b60405180910390f35b610094600480360381019061008f91906102f4565b610106565b005b6100b060048036038101906100ab9190610467565b610110565b005b6100cc60048036038101906100c791906104c3565b6101a6565b6040516100d99190610299565b60405180910390f35b6100ea6101d4565b6040516100f79190610299565b60405180910390f35b60005481565b8060008190555050565b600060405180604001604052808381526020018481525090508160018460405161013a9190610586565b908152602001604051809103902081905550600281908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908051906020019061019e9291906101dd565b505050505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b60008054905090565b8280546101e9906105cc565b90600052602060002090601f01602090048101928261020b5760008555610252565b82601f1061022457805160ff1916838001178555610252565b82800160010185558215610252579182015b82811115610251578251825591602001919060010190610236565b5b50905061025f9190610263565b5090565b5b8082111561027c576000816000905550600101610264565b5090565b6000819050919050565b61029381610280565b82525050565b60006020820190506102ae600083018461028a565b92915050565b6000604051905090565b600080fd5b600080fd5b6102d181610280565b81146102dc57600080fd5b50565b6000813590506102ee816102c8565b92915050565b60006020828403121561030a576103096102be565b5b6000610318848285016102df565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103748261032b565b810181811067ffffffffffffffff821117156103935761039261033c565b5b80604052505050565b60006103a66102b4565b90506103b2828261036b565b919050565b600067ffffffffffffffff8211156103d2576103d161033c565b5b6103db8261032b565b9050602081019050919050565b82818337600083830152505050565b600061040a610405846103b7565b61039c565b90508281526020810184848401111561042657610425610326565b5b6104318482856103e8565b509392505050565b600082601f83011261044e5761044d610321565b5b813561045e8482602086016103f7565b91505092915050565b6000806040838503121561047e5761047d6102be565b5b600083013567ffffffffffffffff81111561049c5761049b6102c3565b5b6104a885828601610439565b92505060206104b9858286016102df565b9150509250929050565b6000602082840312156104d9576104d86102be565b5b600082013567ffffffffffffffff8111156104f7576104f66102c3565b5b61050384828501610439565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015610540578082015181840152602081019050610525565b8381111561054f576000848401525b50505050565b60006105608261050c565b61056a8185610517565b935061057a818560208601610522565b80840191505092915050565b60006105928284610555565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105e457607f821691505b602082108114156105f8576105f761059d565b5b5091905056fea26469706673582212208524ad8d3517b0618a1aead8745420c5119043f5783bc0faa1620d2bec22bd0c64736f6c63430008080033",
    //     chainId: 1337
    //     // chainId: 5777 
    // }

    // const signedTx = await wallet.signTransaction(txs);
    // console.log("Signed Tx:", signedTx);

    // const sentTx = await wallet.sendTransaction(txs);
    // console.log("Sent Tx:", sentTx);

    // @ts-ignore
    const txl = await contract.store(Math.floor(Math.random() * 1000).toString());
    console.log("Txl:", txl);

    // @ts-ignore
    const currentFav = await contract.retreive();


    return currentFav.toString()
}

deploy().then(console.log)